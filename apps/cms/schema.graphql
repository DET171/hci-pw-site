# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  isAdmin: Boolean
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  isAdmin: BooleanFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  isAdmin: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
  createdAt: DateTime
}

type Year {
  id: ID!
  year: String
  projects(where: ProjectWhereInput! = {}, orderBy: [ProjectOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProjectWhereUniqueInput): [Project!]
  projectsCount(where: ProjectWhereInput! = {}): Int
}

input YearWhereUniqueInput {
  id: ID
  year: String
}

input YearWhereInput {
  AND: [YearWhereInput!]
  OR: [YearWhereInput!]
  NOT: [YearWhereInput!]
  id: IDFilter
  year: StringFilter
  projects: ProjectManyRelationFilter
}

input ProjectManyRelationFilter {
  every: ProjectWhereInput
  some: ProjectWhereInput
  none: ProjectWhereInput
}

input YearOrderByInput {
  id: OrderDirection
  year: OrderDirection
}

input YearUpdateInput {
  year: String
  projects: ProjectRelateToManyForUpdateInput
}

input ProjectRelateToManyForUpdateInput {
  disconnect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  create: [ProjectCreateInput!]
  connect: [ProjectWhereUniqueInput!]
}

input YearUpdateArgs {
  where: YearWhereUniqueInput!
  data: YearUpdateInput!
}

input YearCreateInput {
  year: String
  projects: ProjectRelateToManyForCreateInput
}

input ProjectRelateToManyForCreateInput {
  create: [ProjectCreateInput!]
  connect: [ProjectWhereUniqueInput!]
}

type ProjectAuthor {
  id: ID!
  project: Project
  name: String
  class: String
}

input ProjectAuthorWhereUniqueInput {
  id: ID
}

input ProjectAuthorWhereInput {
  AND: [ProjectAuthorWhereInput!]
  OR: [ProjectAuthorWhereInput!]
  NOT: [ProjectAuthorWhereInput!]
  id: IDFilter
  project: ProjectWhereInput
  name: StringFilter
  class: StringFilter
}

input ProjectAuthorOrderByInput {
  id: OrderDirection
  name: OrderDirection
  class: OrderDirection
}

input ProjectAuthorUpdateInput {
  project: ProjectRelateToOneForUpdateInput
  name: String
  class: String
}

input ProjectRelateToOneForUpdateInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
  disconnect: Boolean
}

input ProjectAuthorUpdateArgs {
  where: ProjectAuthorWhereUniqueInput!
  data: ProjectAuthorUpdateInput!
}

input ProjectAuthorCreateInput {
  project: ProjectRelateToOneForCreateInput
  name: String
  class: String
}

input ProjectRelateToOneForCreateInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
}

type Project {
  id: ID!
  title: String
  year: Year
  category: ProjectCategoryType
  authors(where: ProjectAuthorWhereInput! = {}, orderBy: [ProjectAuthorOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProjectAuthorWhereUniqueInput): [ProjectAuthor!]
  authorsCount(where: ProjectAuthorWhereInput! = {}): Int
  bannerImg: ImageFieldOutput
  slides: FileFieldOutput
  summary: String
  description: Project_description_Document
  createdAt: DateTime
}

enum ProjectCategoryType {
  cat1
  cat2
  cat3
  cat4
  cat5
  cat6
  cat7
  cat8
  cat9
  cat10
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

type Project_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ProjectWhereUniqueInput {
  id: ID
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  id: IDFilter
  title: StringFilter
  year: YearWhereInput
  category: ProjectCategoryTypeNullableFilter
  authors: ProjectAuthorManyRelationFilter
  summary: StringFilter
  createdAt: DateTimeNullableFilter
}

input ProjectCategoryTypeNullableFilter {
  equals: ProjectCategoryType
  in: [ProjectCategoryType!]
  notIn: [ProjectCategoryType!]
  not: ProjectCategoryTypeNullableFilter
}

input ProjectAuthorManyRelationFilter {
  every: ProjectAuthorWhereInput
  some: ProjectAuthorWhereInput
  none: ProjectAuthorWhereInput
}

input ProjectOrderByInput {
  id: OrderDirection
  title: OrderDirection
  category: OrderDirection
  summary: OrderDirection
  createdAt: OrderDirection
}

input ProjectUpdateInput {
  title: String
  year: YearRelateToOneForUpdateInput
  category: ProjectCategoryType
  authors: ProjectAuthorRelateToManyForUpdateInput
  bannerImg: ImageFieldInput
  slides: FileFieldInput
  summary: String
  description: JSON
  createdAt: DateTime
}

input YearRelateToOneForUpdateInput {
  create: YearCreateInput
  connect: YearWhereUniqueInput
  disconnect: Boolean
}

input ProjectAuthorRelateToManyForUpdateInput {
  disconnect: [ProjectAuthorWhereUniqueInput!]
  set: [ProjectAuthorWhereUniqueInput!]
  create: [ProjectAuthorCreateInput!]
  connect: [ProjectAuthorWhereUniqueInput!]
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input FileFieldInput {
  upload: Upload!
}

input ProjectUpdateArgs {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateInput!
}

input ProjectCreateInput {
  title: String
  year: YearRelateToOneForCreateInput
  category: ProjectCategoryType
  authors: ProjectAuthorRelateToManyForCreateInput
  bannerImg: ImageFieldInput
  slides: FileFieldInput
  summary: String
  description: JSON
  createdAt: DateTime
}

input YearRelateToOneForCreateInput {
  create: YearCreateInput
  connect: YearWhereUniqueInput
}

input ProjectAuthorRelateToManyForCreateInput {
  create: [ProjectAuthorCreateInput!]
  connect: [ProjectAuthorWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createYear(data: YearCreateInput!): Year
  createYears(data: [YearCreateInput!]!): [Year]
  updateYear(where: YearWhereUniqueInput!, data: YearUpdateInput!): Year
  updateYears(data: [YearUpdateArgs!]!): [Year]
  deleteYear(where: YearWhereUniqueInput!): Year
  deleteYears(where: [YearWhereUniqueInput!]!): [Year]
  createProjectAuthor(data: ProjectAuthorCreateInput!): ProjectAuthor
  createProjectAuthors(data: [ProjectAuthorCreateInput!]!): [ProjectAuthor]
  updateProjectAuthor(where: ProjectAuthorWhereUniqueInput!, data: ProjectAuthorUpdateInput!): ProjectAuthor
  updateProjectAuthors(data: [ProjectAuthorUpdateArgs!]!): [ProjectAuthor]
  deleteProjectAuthor(where: ProjectAuthorWhereUniqueInput!): ProjectAuthor
  deleteProjectAuthors(where: [ProjectAuthorWhereUniqueInput!]!): [ProjectAuthor]
  createProject(data: ProjectCreateInput!): Project
  createProjects(data: [ProjectCreateInput!]!): [Project]
  updateProject(where: ProjectWhereUniqueInput!, data: ProjectUpdateInput!): Project
  updateProjects(data: [ProjectUpdateArgs!]!): [Project]
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteProjects(where: [ProjectWhereUniqueInput!]!): [Project]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  year(where: YearWhereUniqueInput!): Year
  years(where: YearWhereInput! = {}, orderBy: [YearOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: YearWhereUniqueInput): [Year!]
  yearsCount(where: YearWhereInput! = {}): Int
  projectAuthor(where: ProjectAuthorWhereUniqueInput!): ProjectAuthor
  projectAuthors(where: ProjectAuthorWhereInput! = {}, orderBy: [ProjectAuthorOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProjectAuthorWhereUniqueInput): [ProjectAuthor!]
  projectAuthorsCount(where: ProjectAuthorWhereInput! = {}): Int
  project(where: ProjectWhereUniqueInput!): Project
  projects(where: ProjectWhereInput! = {}, orderBy: [ProjectOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProjectWhereUniqueInput): [Project!]
  projectsCount(where: ProjectWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
